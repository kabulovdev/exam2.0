// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: custum/custum.proto

package custumer

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_4440afa427d8d767, []int{0}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return m.Size()
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type GetId struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetId) Reset()         { *m = GetId{} }
func (m *GetId) String() string { return proto.CompactTextString(m) }
func (*GetId) ProtoMessage()    {}
func (*GetId) Descriptor() ([]byte, []int) {
	return fileDescriptor_4440afa427d8d767, []int{1}
}
func (m *GetId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetId.Merge(m, src)
}
func (m *GetId) XXX_Size() int {
	return m.Size()
}
func (m *GetId) XXX_DiscardUnknown() {
	xxx_messageInfo_GetId.DiscardUnknown(m)
}

var xxx_messageInfo_GetId proto.InternalMessageInfo

func (m *GetId) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type CustumerInfo struct {
	Id                   int64            `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	FirstName            string           `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name"`
	LastName             string           `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name"`
	Email                string           `protobuf:"bytes,4,opt,name=email,proto3" json:"email"`
	PhoneNumber          string           `protobuf:"bytes,5,opt,name=phoneNumber,proto3" json:"phoneNumber"`
	Bio                  string           `protobuf:"bytes,6,opt,name=Bio,proto3" json:"Bio"`
	Addresses            []*CustumAddress `protobuf:"bytes,7,rep,name=addresses,proto3" json:"addresses"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CustumerInfo) Reset()         { *m = CustumerInfo{} }
func (m *CustumerInfo) String() string { return proto.CompactTextString(m) }
func (*CustumerInfo) ProtoMessage()    {}
func (*CustumerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4440afa427d8d767, []int{2}
}
func (m *CustumerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustumerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustumerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CustumerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustumerInfo.Merge(m, src)
}
func (m *CustumerInfo) XXX_Size() int {
	return m.Size()
}
func (m *CustumerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CustumerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CustumerInfo proto.InternalMessageInfo

func (m *CustumerInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CustumerInfo) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *CustumerInfo) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *CustumerInfo) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *CustumerInfo) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *CustumerInfo) GetBio() string {
	if m != nil {
		return m.Bio
	}
	return ""
}

func (m *CustumerInfo) GetAddresses() []*CustumAddress {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type CustumAddress struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Street               string   `protobuf:"bytes,2,opt,name=street,proto3" json:"street"`
	HomeAdress           string   `protobuf:"bytes,3,opt,name=home_adress,json=homeAdress,proto3" json:"home_adress"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CustumAddress) Reset()         { *m = CustumAddress{} }
func (m *CustumAddress) String() string { return proto.CompactTextString(m) }
func (*CustumAddress) ProtoMessage()    {}
func (*CustumAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_4440afa427d8d767, []int{3}
}
func (m *CustumAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustumAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustumAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CustumAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustumAddress.Merge(m, src)
}
func (m *CustumAddress) XXX_Size() int {
	return m.Size()
}
func (m *CustumAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_CustumAddress.DiscardUnknown(m)
}

var xxx_messageInfo_CustumAddress proto.InternalMessageInfo

func (m *CustumAddress) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CustumAddress) GetStreet() string {
	if m != nil {
		return m.Street
	}
	return ""
}

func (m *CustumAddress) GetHomeAdress() string {
	if m != nil {
		return m.HomeAdress
	}
	return ""
}

type CustumerAll struct {
	AllCustum            []*CustumerInfo `protobuf:"bytes,1,rep,name=allCustum,proto3" json:"allCustum"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CustumerAll) Reset()         { *m = CustumerAll{} }
func (m *CustumerAll) String() string { return proto.CompactTextString(m) }
func (*CustumerAll) ProtoMessage()    {}
func (*CustumerAll) Descriptor() ([]byte, []int) {
	return fileDescriptor_4440afa427d8d767, []int{4}
}
func (m *CustumerAll) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustumerAll) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustumerAll.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CustumerAll) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustumerAll.Merge(m, src)
}
func (m *CustumerAll) XXX_Size() int {
	return m.Size()
}
func (m *CustumerAll) XXX_DiscardUnknown() {
	xxx_messageInfo_CustumerAll.DiscardUnknown(m)
}

var xxx_messageInfo_CustumerAll proto.InternalMessageInfo

func (m *CustumerAll) GetAllCustum() []*CustumerInfo {
	if m != nil {
		return m.AllCustum
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "custumer.Empty")
	proto.RegisterType((*GetId)(nil), "custumer.GetId")
	proto.RegisterType((*CustumerInfo)(nil), "custumer.CustumerInfo")
	proto.RegisterType((*CustumAddress)(nil), "custumer.CustumAddress")
	proto.RegisterType((*CustumerAll)(nil), "custumer.CustumerAll")
}

func init() { proto.RegisterFile("custum/custum.proto", fileDescriptor_4440afa427d8d767) }

var fileDescriptor_4440afa427d8d767 = []byte{
	// 397 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xc1, 0xae, 0xd2, 0x40,
	0x14, 0x86, 0x9d, 0xd6, 0xf6, 0xde, 0x9e, 0x8a, 0xde, 0x8c, 0x7a, 0x6f, 0x83, 0xb1, 0x36, 0x5d,
	0xb1, 0x82, 0x04, 0x35, 0xb2, 0x2d, 0x68, 0x08, 0x89, 0x61, 0x51, 0x63, 0xe2, 0x8e, 0x0c, 0xf4,
	0x10, 0x9a, 0xcc, 0xd0, 0x66, 0x3a, 0x98, 0xf0, 0x26, 0xbe, 0x81, 0xaf, 0xe2, 0xd2, 0xbd, 0x1b,
	0x83, 0x2f, 0x62, 0x98, 0x69, 0x03, 0x42, 0x70, 0x71, 0x57, 0x70, 0xbe, 0xff, 0x3f, 0x39, 0xe7,
	0x3f, 0x1d, 0x78, 0xba, 0xd8, 0x54, 0x6a, 0x23, 0x7a, 0xe6, 0xa7, 0x5b, 0xca, 0x42, 0x15, 0xf4,
	0xda, 0x54, 0x28, 0xe3, 0x2b, 0x70, 0x3e, 0x88, 0x52, 0x6d, 0xe3, 0x3b, 0x70, 0xc6, 0xa8, 0x26,
	0x19, 0x7d, 0x0c, 0x56, 0x9e, 0x05, 0x24, 0x22, 0x1d, 0x3b, 0xb5, 0xf2, 0x2c, 0xfe, 0x45, 0xe0,
	0xd1, 0xa8, 0xb6, 0x4f, 0xd6, 0xcb, 0xe2, 0xd4, 0x40, 0x5f, 0x02, 0x2c, 0x73, 0x59, 0xa9, 0xd9,
	0x9a, 0x09, 0x0c, 0xac, 0x88, 0x74, 0xbc, 0xd4, 0xd3, 0x64, 0xca, 0x04, 0xd2, 0x17, 0xe0, 0x71,
	0xd6, 0xa8, 0xb6, 0x56, 0xaf, 0xf7, 0x40, 0x8b, 0xcf, 0xc0, 0x41, 0xc1, 0x72, 0x1e, 0x3c, 0xd4,
	0x82, 0x29, 0x68, 0x04, 0x7e, 0xb9, 0x2a, 0xd6, 0x38, 0xdd, 0x88, 0x39, 0xca, 0xc0, 0xd1, 0xda,
	0x31, 0xa2, 0x37, 0x60, 0x0f, 0xf3, 0x22, 0x70, 0xb5, 0xb2, 0xff, 0x4b, 0xdf, 0x82, 0xc7, 0xb2,
	0x4c, 0x62, 0x55, 0x61, 0x15, 0x5c, 0x45, 0x76, 0xc7, 0xef, 0xdf, 0x75, 0x9b, 0x98, 0x5d, 0x13,
	0x20, 0x31, 0x86, 0xf4, 0xe0, 0x8c, 0xbf, 0x40, 0xeb, 0x1f, 0xed, 0x2c, 0xdd, 0x2d, 0xb8, 0x95,
	0x92, 0x88, 0xaa, 0x4e, 0x56, 0x57, 0xf4, 0x15, 0xf8, 0xab, 0x42, 0xe0, 0x8c, 0xe9, 0xb6, 0x3a,
	0x18, 0xec, 0x51, 0xa2, 0x49, 0x3c, 0x02, 0xbf, 0x39, 0x5b, 0xc2, 0x39, 0x7d, 0x03, 0x1e, 0xe3,
	0xdc, 0x90, 0x80, 0xe8, 0xfd, 0x6e, 0x4f, 0xf7, 0x33, 0x07, 0x4e, 0x0f, 0xc6, 0xfe, 0x77, 0xcb,
	0xec, 0x57, 0x88, 0x4f, 0x28, 0xbf, 0xe6, 0x0b, 0xa4, 0x03, 0x70, 0x47, 0x12, 0x99, 0x42, 0x7a,
	0xa1, 0xbd, 0x7d, 0x81, 0xd3, 0x01, 0xb4, 0xc6, 0xa8, 0x86, 0x5b, 0x03, 0x27, 0x19, 0x7d, 0x72,
	0x30, 0xea, 0x4f, 0xff, 0x9f, 0x4e, 0xf7, 0x73, 0x99, 0xdd, 0x67, 0x66, 0x0f, 0xfc, 0xf7, 0xc8,
	0x51, 0x19, 0x78, 0x3e, 0xf1, 0x08, 0xe8, 0x67, 0x48, 0xdf, 0x41, 0xeb, 0x63, 0x5e, 0xa9, 0xa4,
	0xb9, 0x00, 0x3d, 0x75, 0xb4, 0x9f, 0x9f, 0x8f, 0x4a, 0x38, 0x1f, 0xde, 0xfc, 0xd8, 0x85, 0xe4,
	0xe7, 0x2e, 0x24, 0xbf, 0x77, 0x21, 0xf9, 0xf6, 0x27, 0x7c, 0x30, 0x77, 0xf5, 0x5b, 0x7f, 0xfd,
	0x37, 0x00, 0x00, 0xff, 0xff, 0x32, 0x7a, 0xb1, 0x65, 0x02, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomServiceClient is the client API for CustomService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomServiceClient interface {
	Create(ctx context.Context, in *CustumerInfo, opts ...grpc.CallOption) (*CustumerInfo, error)
	GetByCustumId(ctx context.Context, in *GetId, opts ...grpc.CallOption) (*CustumerInfo, error)
	Update(ctx context.Context, in *CustumerInfo, opts ...grpc.CallOption) (*CustumerInfo, error)
	DeletCustum(ctx context.Context, in *GetId, opts ...grpc.CallOption) (*Empty, error)
	ListAllCustum(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CustumerAll, error)
}

type customServiceClient struct {
	cc *grpc.ClientConn
}

func NewCustomServiceClient(cc *grpc.ClientConn) CustomServiceClient {
	return &customServiceClient{cc}
}

func (c *customServiceClient) Create(ctx context.Context, in *CustumerInfo, opts ...grpc.CallOption) (*CustumerInfo, error) {
	out := new(CustumerInfo)
	err := c.cc.Invoke(ctx, "/custumer.CustomService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customServiceClient) GetByCustumId(ctx context.Context, in *GetId, opts ...grpc.CallOption) (*CustumerInfo, error) {
	out := new(CustumerInfo)
	err := c.cc.Invoke(ctx, "/custumer.CustomService/GetByCustumId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customServiceClient) Update(ctx context.Context, in *CustumerInfo, opts ...grpc.CallOption) (*CustumerInfo, error) {
	out := new(CustumerInfo)
	err := c.cc.Invoke(ctx, "/custumer.CustomService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customServiceClient) DeletCustum(ctx context.Context, in *GetId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/custumer.CustomService/DeletCustum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customServiceClient) ListAllCustum(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CustumerAll, error) {
	out := new(CustumerAll)
	err := c.cc.Invoke(ctx, "/custumer.CustomService/ListAllCustum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomServiceServer is the server API for CustomService service.
type CustomServiceServer interface {
	Create(context.Context, *CustumerInfo) (*CustumerInfo, error)
	GetByCustumId(context.Context, *GetId) (*CustumerInfo, error)
	Update(context.Context, *CustumerInfo) (*CustumerInfo, error)
	DeletCustum(context.Context, *GetId) (*Empty, error)
	ListAllCustum(context.Context, *Empty) (*CustumerAll, error)
}

// UnimplementedCustomServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCustomServiceServer struct {
}

func (*UnimplementedCustomServiceServer) Create(ctx context.Context, req *CustumerInfo) (*CustumerInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedCustomServiceServer) GetByCustumId(ctx context.Context, req *GetId) (*CustumerInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByCustumId not implemented")
}
func (*UnimplementedCustomServiceServer) Update(ctx context.Context, req *CustumerInfo) (*CustumerInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedCustomServiceServer) DeletCustum(ctx context.Context, req *GetId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletCustum not implemented")
}
func (*UnimplementedCustomServiceServer) ListAllCustum(ctx context.Context, req *Empty) (*CustumerAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllCustum not implemented")
}

func RegisterCustomServiceServer(s *grpc.Server, srv CustomServiceServer) {
	s.RegisterService(&_CustomService_serviceDesc, srv)
}

func _CustomService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustumerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/custumer.CustomService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomServiceServer).Create(ctx, req.(*CustumerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomService_GetByCustumId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomServiceServer).GetByCustumId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/custumer.CustomService/GetByCustumId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomServiceServer).GetByCustumId(ctx, req.(*GetId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustumerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/custumer.CustomService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomServiceServer).Update(ctx, req.(*CustumerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomService_DeletCustum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomServiceServer).DeletCustum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/custumer.CustomService/DeletCustum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomServiceServer).DeletCustum(ctx, req.(*GetId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomService_ListAllCustum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomServiceServer).ListAllCustum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/custumer.CustomService/ListAllCustum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomServiceServer).ListAllCustum(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "custumer.CustomService",
	HandlerType: (*CustomServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CustomService_Create_Handler,
		},
		{
			MethodName: "GetByCustumId",
			Handler:    _CustomService_GetByCustumId_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CustomService_Update_Handler,
		},
		{
			MethodName: "DeletCustum",
			Handler:    _CustomService_DeletCustum_Handler,
		},
		{
			MethodName: "ListAllCustum",
			Handler:    _CustomService_ListAllCustum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "custum/custum.proto",
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Empty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GetId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintCustum(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CustumerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustumerInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustumerInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Addresses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCustum(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Bio) > 0 {
		i -= len(m.Bio)
		copy(dAtA[i:], m.Bio)
		i = encodeVarintCustum(dAtA, i, uint64(len(m.Bio)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintCustum(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintCustum(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintCustum(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintCustum(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintCustum(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CustumAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustumAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustumAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.HomeAdress) > 0 {
		i -= len(m.HomeAdress)
		copy(dAtA[i:], m.HomeAdress)
		i = encodeVarintCustum(dAtA, i, uint64(len(m.HomeAdress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Street) > 0 {
		i -= len(m.Street)
		copy(dAtA[i:], m.Street)
		i = encodeVarintCustum(dAtA, i, uint64(len(m.Street)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintCustum(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CustumerAll) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustumerAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustumerAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AllCustum) > 0 {
		for iNdEx := len(m.AllCustum) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AllCustum[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCustum(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintCustum(dAtA []byte, offset int, v uint64) int {
	offset -= sovCustum(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Empty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCustum(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CustumerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCustum(uint64(m.Id))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovCustum(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovCustum(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovCustum(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovCustum(uint64(l))
	}
	l = len(m.Bio)
	if l > 0 {
		n += 1 + l + sovCustum(uint64(l))
	}
	if len(m.Addresses) > 0 {
		for _, e := range m.Addresses {
			l = e.Size()
			n += 1 + l + sovCustum(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CustumAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCustum(uint64(m.Id))
	}
	l = len(m.Street)
	if l > 0 {
		n += 1 + l + sovCustum(uint64(l))
	}
	l = len(m.HomeAdress)
	if l > 0 {
		n += 1 + l + sovCustum(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CustumerAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AllCustum) > 0 {
		for _, e := range m.AllCustum {
			l = e.Size()
			n += 1 + l + sovCustum(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCustum(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCustum(x uint64) (n int) {
	return sovCustum(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCustum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCustum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCustum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCustum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustumerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustumerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustumerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustum
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustum
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustum
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustum
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustum
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bio = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCustum
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCustum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, &CustumAddress{})
			if err := m.Addresses[len(m.Addresses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCustum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCustum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustumAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustumAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustumAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Street", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustum
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Street = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeAdress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustum
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HomeAdress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCustum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCustum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustumerAll) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustumerAll: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustumerAll: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllCustum", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCustum
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCustum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllCustum = append(m.AllCustum, &CustumerInfo{})
			if err := m.AllCustum[len(m.AllCustum)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCustum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCustum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCustum(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCustum
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCustum
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCustum
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCustum
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCustum
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCustum
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCustum        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCustum          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCustum = fmt.Errorf("proto: unexpected end of group")
)
