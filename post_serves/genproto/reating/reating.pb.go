// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: reating/reating.proto

package reating

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EmptyReating struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyReating) Reset()         { *m = EmptyReating{} }
func (m *EmptyReating) String() string { return proto.CompactTextString(m) }
func (*EmptyReating) ProtoMessage()    {}
func (*EmptyReating) Descriptor() ([]byte, []int) {
	return fileDescriptor_18816f2389498ed4, []int{0}
}
func (m *EmptyReating) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmptyReating) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EmptyReating.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EmptyReating) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyReating.Merge(m, src)
}
func (m *EmptyReating) XXX_Size() int {
	return m.Size()
}
func (m *EmptyReating) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyReating.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyReating proto.InternalMessageInfo

type Id struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Id) Reset()         { *m = Id{} }
func (m *Id) String() string { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()    {}
func (*Id) Descriptor() ([]byte, []int) {
	return fileDescriptor_18816f2389498ed4, []int{1}
}
func (m *Id) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Id) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Id.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Id) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Id.Merge(m, src)
}
func (m *Id) XXX_Size() int {
	return m.Size()
}
func (m *Id) XXX_DiscardUnknown() {
	xxx_messageInfo_Id.DiscardUnknown(m)
}

var xxx_messageInfo_Id proto.InternalMessageInfo

func (m *Id) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ReatingInfo struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	PostId               int64    `protobuf:"varint,2,opt,name=post_id,json=postId,proto3" json:"post_id"`
	CustumerId           int64    `protobuf:"varint,3,opt,name=custumer_id,json=custumerId,proto3" json:"custumer_id"`
	Reating              int64    `protobuf:"varint,4,opt,name=reating,proto3" json:"reating"`
	Description          string   `protobuf:"bytes,5,opt,name=description,proto3" json:"description"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReatingInfo) Reset()         { *m = ReatingInfo{} }
func (m *ReatingInfo) String() string { return proto.CompactTextString(m) }
func (*ReatingInfo) ProtoMessage()    {}
func (*ReatingInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_18816f2389498ed4, []int{2}
}
func (m *ReatingInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReatingInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReatingInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReatingInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReatingInfo.Merge(m, src)
}
func (m *ReatingInfo) XXX_Size() int {
	return m.Size()
}
func (m *ReatingInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ReatingInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ReatingInfo proto.InternalMessageInfo

func (m *ReatingInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ReatingInfo) GetPostId() int64 {
	if m != nil {
		return m.PostId
	}
	return 0
}

func (m *ReatingInfo) GetCustumerId() int64 {
	if m != nil {
		return m.CustumerId
	}
	return 0
}

func (m *ReatingInfo) GetReating() int64 {
	if m != nil {
		return m.Reating
	}
	return 0
}

func (m *ReatingInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func init() {
	proto.RegisterType((*EmptyReating)(nil), "reating.EmptyReating")
	proto.RegisterType((*Id)(nil), "reating.Id")
	proto.RegisterType((*ReatingInfo)(nil), "reating.ReatingInfo")
}

func init() { proto.RegisterFile("reating/reating.proto", fileDescriptor_18816f2389498ed4) }

var fileDescriptor_18816f2389498ed4 = []byte{
	// 266 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2d, 0x4a, 0x4d, 0x2c,
	0xc9, 0xcc, 0x4b, 0xd7, 0x87, 0xd2, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0xec, 0x50, 0xae,
	0x12, 0x1f, 0x17, 0x8f, 0x6b, 0x6e, 0x41, 0x49, 0x65, 0x10, 0x94, 0x2f, 0xc2, 0xc5, 0xe4, 0x99,
	0x22, 0xc4, 0xc7, 0xc5, 0x94, 0x99, 0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x1c, 0xc4, 0x94, 0x99,
	0xa2, 0x34, 0x99, 0x91, 0x8b, 0x1b, 0xaa, 0xc2, 0x33, 0x2f, 0x2d, 0x1f, 0x5d, 0x5e, 0x48, 0x9c,
	0x8b, 0xbd, 0x20, 0xbf, 0xb8, 0x24, 0x3e, 0x33, 0x45, 0x82, 0x09, 0x2c, 0xc8, 0x06, 0xe2, 0x7a,
	0xa6, 0x08, 0xc9, 0x73, 0x71, 0x27, 0x97, 0x16, 0x97, 0x94, 0xe6, 0xa6, 0x16, 0x81, 0x24, 0x99,
	0xc1, 0x92, 0x5c, 0x30, 0x21, 0xcf, 0x14, 0x21, 0x09, 0x2e, 0x98, 0x53, 0x24, 0x58, 0xc0, 0x92,
	0x30, 0xae, 0x90, 0x02, 0x17, 0x77, 0x4a, 0x6a, 0x71, 0x72, 0x51, 0x66, 0x41, 0x49, 0x66, 0x7e,
	0x9e, 0x04, 0xab, 0x02, 0xa3, 0x06, 0x67, 0x10, 0xb2, 0x90, 0xd1, 0x2d, 0x46, 0x2e, 0x3e, 0xa8,
	0xab, 0x82, 0x53, 0x8b, 0xca, 0x32, 0x93, 0x53, 0x85, 0x4c, 0xb8, 0xd8, 0x9c, 0x41, 0x06, 0xa4,
	0x0a, 0x89, 0xe8, 0xc1, 0x7c, 0x8c, 0xe4, 0x70, 0x29, 0xac, 0xa2, 0x42, 0xfa, 0x5c, 0x5c, 0xee,
	0xa9, 0x25, 0x50, 0x11, 0x21, 0x6e, 0xb8, 0x1a, 0xcf, 0x14, 0x1c, 0x1a, 0x4c, 0xb8, 0xd8, 0x42,
	0x0b, 0x52, 0x48, 0xb5, 0x46, 0x9b, 0x8b, 0xd5, 0x25, 0x35, 0x27, 0xb5, 0x04, 0xd5, 0x06, 0x51,
	0x38, 0x07, 0x39, 0x22, 0x9c, 0x04, 0x4e, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1,
	0x23, 0x39, 0xc6, 0x19, 0x8f, 0xe5, 0x18, 0x92, 0xd8, 0xc0, 0x51, 0x67, 0x0c, 0x08, 0x00, 0x00,
	0xff, 0xff, 0x9c, 0x3d, 0x79, 0x8f, 0xd3, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ReatingServiceClient is the client API for ReatingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReatingServiceClient interface {
	Create(ctx context.Context, in *ReatingInfo, opts ...grpc.CallOption) (*ReatingInfo, error)
	GetReating(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ReatingInfo, error)
	Update(ctx context.Context, in *ReatingInfo, opts ...grpc.CallOption) (*ReatingInfo, error)
	Delet(ctx context.Context, in *Id, opts ...grpc.CallOption) (*EmptyReating, error)
}

type reatingServiceClient struct {
	cc *grpc.ClientConn
}

func NewReatingServiceClient(cc *grpc.ClientConn) ReatingServiceClient {
	return &reatingServiceClient{cc}
}

func (c *reatingServiceClient) Create(ctx context.Context, in *ReatingInfo, opts ...grpc.CallOption) (*ReatingInfo, error) {
	out := new(ReatingInfo)
	err := c.cc.Invoke(ctx, "/reating.ReatingService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reatingServiceClient) GetReating(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ReatingInfo, error) {
	out := new(ReatingInfo)
	err := c.cc.Invoke(ctx, "/reating.ReatingService/GetReating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reatingServiceClient) Update(ctx context.Context, in *ReatingInfo, opts ...grpc.CallOption) (*ReatingInfo, error) {
	out := new(ReatingInfo)
	err := c.cc.Invoke(ctx, "/reating.ReatingService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reatingServiceClient) Delet(ctx context.Context, in *Id, opts ...grpc.CallOption) (*EmptyReating, error) {
	out := new(EmptyReating)
	err := c.cc.Invoke(ctx, "/reating.ReatingService/Delet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReatingServiceServer is the server API for ReatingService service.
type ReatingServiceServer interface {
	Create(context.Context, *ReatingInfo) (*ReatingInfo, error)
	GetReating(context.Context, *Id) (*ReatingInfo, error)
	Update(context.Context, *ReatingInfo) (*ReatingInfo, error)
	Delet(context.Context, *Id) (*EmptyReating, error)
}

// UnimplementedReatingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedReatingServiceServer struct {
}

func (*UnimplementedReatingServiceServer) Create(ctx context.Context, req *ReatingInfo) (*ReatingInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedReatingServiceServer) GetReating(ctx context.Context, req *Id) (*ReatingInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReating not implemented")
}
func (*UnimplementedReatingServiceServer) Update(ctx context.Context, req *ReatingInfo) (*ReatingInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedReatingServiceServer) Delet(ctx context.Context, req *Id) (*EmptyReating, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delet not implemented")
}

func RegisterReatingServiceServer(s *grpc.Server, srv ReatingServiceServer) {
	s.RegisterService(&_ReatingService_serviceDesc, srv)
}

func _ReatingService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReatingInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReatingServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reating.ReatingService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReatingServiceServer).Create(ctx, req.(*ReatingInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReatingService_GetReating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReatingServiceServer).GetReating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reating.ReatingService/GetReating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReatingServiceServer).GetReating(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReatingService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReatingInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReatingServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reating.ReatingService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReatingServiceServer).Update(ctx, req.(*ReatingInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReatingService_Delet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReatingServiceServer).Delet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reating.ReatingService/Delet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReatingServiceServer).Delet(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReatingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "reating.ReatingService",
	HandlerType: (*ReatingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ReatingService_Create_Handler,
		},
		{
			MethodName: "GetReating",
			Handler:    _ReatingService_GetReating_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ReatingService_Update_Handler,
		},
		{
			MethodName: "Delet",
			Handler:    _ReatingService_Delet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reating/reating.proto",
}

func (m *EmptyReating) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmptyReating) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EmptyReating) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *Id) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Id) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Id) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintReating(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReatingInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReatingInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReatingInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintReating(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Reating != 0 {
		i = encodeVarintReating(dAtA, i, uint64(m.Reating))
		i--
		dAtA[i] = 0x20
	}
	if m.CustumerId != 0 {
		i = encodeVarintReating(dAtA, i, uint64(m.CustumerId))
		i--
		dAtA[i] = 0x18
	}
	if m.PostId != 0 {
		i = encodeVarintReating(dAtA, i, uint64(m.PostId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintReating(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintReating(dAtA []byte, offset int, v uint64) int {
	offset -= sovReating(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EmptyReating) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Id) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovReating(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReatingInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovReating(uint64(m.Id))
	}
	if m.PostId != 0 {
		n += 1 + sovReating(uint64(m.PostId))
	}
	if m.CustumerId != 0 {
		n += 1 + sovReating(uint64(m.CustumerId))
	}
	if m.Reating != 0 {
		n += 1 + sovReating(uint64(m.Reating))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovReating(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovReating(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozReating(x uint64) (n int) {
	return sovReating(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EmptyReating) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmptyReating: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmptyReating: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipReating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Id) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Id: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Id: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReatingInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReatingInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReatingInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostId", wireType)
			}
			m.PostId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PostId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustumerId", wireType)
			}
			m.CustumerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CustumerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reating", wireType)
			}
			m.Reating = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reating |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReating
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReating
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReating(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReating
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReating
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReating
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReating
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupReating
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthReating
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthReating        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReating          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupReating = fmt.Errorf("proto: unexpected end of group")
)
